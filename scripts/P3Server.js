/**
 * Purpose: Create an express framework to communicate with the webpage using GET and POST
 * with their respective endpionts
 *
 * @author Basel Allam
 */

//Starting the express framework
const express = require("express");

//Declaring the top level express function
const server = express();

//The port where the server will be listening for requests
const port = 3777;

//An empty JSON object to store what the webpages sends to the server and later to send it back
let object = {};

//Allowing the server to understand JSON
server.use(express.json());

//Enabling the server to read name-value pairs
server.use(express.urlencoded({ extended: true }));

/**
 * A function to allow requests to the server from any origin but only GET
 * & POST requests that have a content type
 *
 * @param {*} req request object generated by the HTTP event
 * @param {*} res request object generated by the HTTP event
 * @param {*} next predefined function required to be run after the middleware has run
 *
 * @author Basel
 */
const allowCrossDomain = function (req, res, next) {
  //Allowing any origin
  res.header("Access-Control-Allow-Origin", "*");

  //Allowing GET & POST
  res.header("Access-Control-Allow-Methods", "GET,POST");

  //Checking for content type
  res.header("Access-Control-Allow-Headers", "Content-Type");

  //Calling next to keep the middleware going
  next();
};

//Setting the server domain attributes that we defined
server.use(allowCrossDomain);

/**
 * A function to handle POST requests coming from the webpage with endpoint /myPost
 * by assigning obj with the value that the JSON object recieved has
 *
 * @param {*} req request object generated by the HTTP event
 * @param {*} res request object generated by the HTTP event
 *
 * @author Basel
 */
server.post("/myPost", function (req, res) {
  //Setting the values of object with what the server recieved
  object = { total: req.body.total, correct: req.body.correct };

  /*
  Accesing the response request via the reference to set the status to success, then
  placing the obj into the response object and returning it to terminate the middleware
  cycle
  */
  return res.status(200).send(object);
});

/**
 * A function to handle GET requests coming from the webpage with endpoint /myGet
 * by returning the obj to the webpage
 *
 * @param {*} req request object generated by the HTTP event
 * @param {*} res request object generated by the HTTP event
 *
 * @author Basel
 */
server.get("/myGet", function (req, res) {
  /*
  Accessing the response request via the reference to set the status to success, then
  placing obj into the response object and returning it to terminat the middleeware cycle
  */
  return res.status(200).send(object);
});

/**
 * A function to listen for request from the webpage
 *
 * @author Basel
 */
server.listen(port, function () {});
